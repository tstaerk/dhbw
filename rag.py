import os
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings  # Or other embedding models
from langchain_community.vectorstores import FAISS  # Or other vector stores
from langchain.chains import RetrievalQA
from langchain_openai import OpenAI  # Or other LLMs

# to get this running,
# set the environment variable OPENAI_API_KEY to your openai api_key
# put the PDF you want to examine into your_pdf.pdf
# run pip install langchain-openai
# run the program with the command python rag.py

def rag_pdf(pdf_path, openai_api_key, query):
    """
    Performs Retrieval Augmented Generation (RAG) on a PDF document.

    Args:
        pdf_path (str): Path to the PDF file.
        openai_api_key (str): Your OpenAI API key.
        query (str): The query to ask the PDF.

    Returns:
        str: The answer generated by the RAG system.
    """

    try:

        # 1. Load the PDF
        loader = PyPDFLoader(pdf_path)
        documents = loader.load()

        # 2. Split the text into chunks
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        texts = text_splitter.split_documents(documents)

        # 3. Create embeddings
        embeddings = OpenAIEmbeddings()

        # 4. Create the vector store
        vectorstore = FAISS.from_documents(texts, embeddings) #Use other vector stores such as Chroma, Pinecone, etc. if desired.

        # 5. Create the retrieval QA chain
        llm = OpenAI() #Use other LLMs such as HuggingFaceHub, etc.
        qa = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=vectorstore.as_retriever())

        # 6. Run the query
        result = qa.invoke(query)
        return result

    except Exception as e:
        return f"An error occurred: {e}"

# Example Usage:
if __name__ == "__main__":
    pdf_file = "your_pdf.pdf"  # Replace with your PDF file path
    api_key = os.getenv('OPENAI_API_KEY')


    user_query = input("Ich habe das PDF in your_pdf.pdf komplett gelesen und verstanden, stelle mir gerne eine Frage dazu: ")

    if os.path.exists(pdf_file):
        answer = rag_pdf(pdf_file, api_key, user_query)
        print(f"Question: {user_query}")
        print(f"Answer: {answer}")
    elif not os.path.exists(pdf_file):
        print(f"Error: PDF file '{pdf_file}' not found.")
    else:
        print("Error: Please replace 'YOUR_OPENAI_API_KEY' with your actual OpenAI API key.")
